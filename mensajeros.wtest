import mensajeros.*

describe "Test de mensajeros primera parte " {

    test "Morfeo en camion con 1 acoplado pesa 90kg + 500kg "{
        morfeo.transporte(camion)
        camion.acoplados(1)
        assert.equals(590, morfeo.peso())
}

    test "Camion con 2 acoplados pesan 1000kg + 90kg"{
        camion.acoplados(2)
        assert.equals(1090, morfeo.peso()) 
}

    test "monopatin pesa 1kg + "{
        morfeo.transporte(monopatin)
        assert.equals(1, monopatin.peso())
}

    test "Morfeo en monopatin pesa 90kg + 1kg "{
        morfeo.transporte(monopatin)
        assert.equals(91, morfeo.peso() )
}

    test "Morfeo anda en el Nabucodonosor"{
        assert.equals(morfeo.transporte(), camion)
}

    test "el puente deja pasar un mensajero liviano"{
        assert.that(puente.dejarPasar(morfeo))
    }

    test "el puente no deja pasar un mensajero pesado"{
        camion.acoplados(3)
        assert.notThat(puente.dejarPasar(morfeo))
    }

    test "un paquete estaPago"{
        paquete.pago(true)
        assert.that(paquete.estaPago())
    }

    test "un paquete pago con destino a Alsina puede ser entregado por Morfeo en camion liviano"{
        paquete.pagar()
        paquete.destino(puente)
        assert.that(paquete.puedeSerEntregadoPor(morfeo))
    }

    test "un paquete no pago no puede ser entregado por Morfeo"{
        assert.notThat(paquete.puedeSerEntregadoPor(morfeo))
    }

    test "un paquete pago no puede entregado por Morfeo en camion de 3 acoplados"{
        paquete.pagar()
        camion.acoplados(3)
        assert.notThat(paquete.puedeSerEntregadoPor(morfeo))
    }

	test "Neo con credito no puede llevar un paquete que no esta pago a la matrix"{
		neo.tieneCredito(true)
		paquete.estaPago(false)
		paquete.destino(matrix)

		assert.notThat(paquete.puedeSerEntregadoPor(neo))
	}

	test "Neo con credito Si puede llevar un paquete que Si esta pago a la matrix"{
		neo.tieneCredito(true)
		paquete.pagar()
		paquete.destino(matrix)

		assert.that(paquete.puedeSerEntregadoPor(neo))
	}

	test "Neo sin credito NO puede llevar un paquete que Si esta pago a la matrix"{
		neo.tieneCredito(false)
		paquete.pagar()
		paquete.destino(matrix)

		assert.notThat(paquete.puedeSerEntregadoPor(neo))
	}

}
